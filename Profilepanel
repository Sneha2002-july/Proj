import javax.swing.*;
import java.awt.*;

public class DoctorProfilePanel extends JPanel {
    private JTextField nameField, contactField, ageField;
    private JComboBox<String> specializationDropdown;
    private JSpinner startTimeSpinner, endTimeSpinner;

    public DoctorProfilePanel(CardLayout cardLayout, JPanel container, DoctorTableModel tableModel) {
        setLayout(new GridLayout(9, 2, 10, 10));
        setBorder(BorderFactory.createTitledBorder("Doctor Profile"));

        nameField = new JTextField();
        contactField = new JTextField();
        ageField = new JTextField();
        specializationDropdown = new JComboBox<>(new String[]{"Cardiologist", "Dermatologist", "Neurologist", "Pediatrician"});
        startTimeSpinner = new JSpinner(new SpinnerDateModel());
        endTimeSpinner = new JSpinner(new SpinnerDateModel());

        startTimeSpinner.setEditor(new JSpinner.DateEditor(startTimeSpinner, "HH:mm"));
        endTimeSpinner.setEditor(new JSpinner.DateEditor(endTimeSpinner, "HH:mm"));

        add(new JLabel("Doctor Name:"));
        add(nameField);
        add(new JLabel("Contact:"));
        add(contactField);
        add(new JLabel("Age:"));
        add(ageField);
        add(new JLabel("Specialization:"));
        add(specializationDropdown);
        add(new JLabel("Start Time:"));
        add(startTimeSpinner);
        add(new JLabel("End Time:"));
        add(endTimeSpinner);

        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(e -> saveDoctorProfile(tableModel));
        add(saveButton);

        JButton clearButton = new JButton("Clear");
        clearButton.addActionListener(e -> clearFields());
        add(clearButton);

        JButton goToBrowserButton = new JButton("Go to Browser Page");
        goToBrowserButton.addActionListener(e -> cardLayout.show(container, "Browser"));
        add(goToBrowserButton);
    }

    private void saveDoctorProfile(DoctorTableModel tableModel) {
        String name = nameField.getText().trim();
        String contact = contactField.getText().trim();
        String ageText = ageField.getText().trim();
        String specialization = (String) specializationDropdown.getSelectedItem();
        String startTime = startTimeSpinner.getValue().toString();
        String endTime = endTimeSpinner.getValue().toString();

        if (name.isEmpty() || contact.isEmpty() || ageText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int age = Integer.parseInt(ageText);
            if (age <= 0) {
                JOptionPane.showMessageDialog(this, "Age must be a positive number!", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Doctor doctor = new Doctor(name, contact, age, specialization, startTime, endTime);
            tableModel.addDoctor(doctor);
            JOptionPane.showMessageDialog(this, "Doctor Profile Saved Successfully!");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Age must be a valid number!", "Validation Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        nameField.setText("");
        contactField.setText("");
        ageField.setText("");
        specializationDropdown.setSelectedIndex(0);
        startTimeSpinner.setValue(new SpinnerDateModel().getDate());
        endTimeSpinner.setValue(new SpinnerDateModel().getDate());
    }
}
